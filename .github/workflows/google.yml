# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  PROJECT_NUMBER: ${{ secrets.GKE_PROJECT_NUMBER }}
  GAR_LOCATION: asia-northeast1 
  GKE_CLUSTER: online-boutique 
  GKE_ZONE: asia-northeast1  
  DEPLOYMENT_NAME: checkoutservice
  REPOSITORY: my-docker-repo
  IMAGE: checkoutservice
  DOCKER_FILE: src/checkoutservice/Dockerfile
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Set up kustomize
    #- name: Set up Kustomize
    #  run: |-
    #    curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    
    - uses: imranismail/setup-kustomize@v2


    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Obtain access token by using workload identity federation'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: "projects/${{env.PROJECT_NUMBER}}/locations/global/workloadIdentityPools/github/providers/github"
        service_account: ${{env.GCP_SERVICE_ACCOUNT}}
        project_id: ${{env.PROJECT_ID}}

    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: 'online-boutique'
        location: 'asia-northeast1'
    
    #test GKE connection
    - id: 'get-pods'
      run: 'kubectl get pods'

    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v2"

    - name: "Use gcloud CLI"
      run: "gcloud info"

    - name: "Docker auth"
      run: |-
        gcloud auth configure-docker  $GAR_LOCATION-docker.pkg.dev --quiet


    - name: "Unit Test"
      run: |-
        cd src/checkoutservice/
        go test      

    # Build the Docker image
    - name: Build
      run: |-
        cd src/checkoutservice/
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    # Deploy the Docker image to the GKE cluster by updating tag
    - name: Deploy
      run: |-
        cd kustomize
        # replacing the image name in the k8s template
        kustomize edit set image $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE=:$GITHUB_SHA
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        curl -s -o /dev/null -I -w "%{http_code}" $(kubectl get service frontend-external | awk '{print $4}')
    